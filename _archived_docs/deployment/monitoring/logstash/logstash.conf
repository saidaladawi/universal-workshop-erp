# Logstash Configuration for ERPNext/Frappe Log Processing
input {
  # Filebeat input
  beats {
    port => 5044
  }
  
  # Syslog input
  syslog {
    port => 5000
  }
  
  # File inputs for direct log monitoring
  file {
    path => "/var/log/frappe/*.log"
    start_position => "beginning"
    tags => ["frappe"]
  }
  
  file {
    path => "/var/log/nginx/access.log"
    start_position => "beginning"
    tags => ["nginx", "access"]
  }
  
  file {
    path => "/var/log/nginx/error.log"
    start_position => "beginning"
    tags => ["nginx", "error"]
  }
}

filter {
  # Parse Frappe logs
  if "frappe" in [tags] {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} - %{LOGLEVEL:level} - %{GREEDYDATA:log_message}" 
      }
    }
    
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss,SSS" ]
    }
    
    # Extract additional fields from Frappe logs
    if [log_message] =~ /.*Method:.*/ {
      grok {
        match => { 
          "log_message" => ".*Method: %{WORD:http_method} %{URIPATH:uri_path}.*" 
        }
      }
    }
    
    # Parse error levels and add severity
    if [level] == "ERROR" {
      mutate { add_field => { "severity" => "high" } }
    } else if [level] == "WARNING" {
      mutate { add_field => { "severity" => "medium" } }
    } else {
      mutate { add_field => { "severity" => "low" } }
    }
  }
  
  # Parse Nginx access logs
  if "nginx" in [tags] and "access" in [tags] {
    grok {
      match => { 
        "message" => "%{NGINXACCESS}" 
      }
    }
    
    date {
      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
    
    # Convert response code to number
    mutate {
      convert => { "response" => "integer" }
      convert => { "bytes" => "integer" }
    }
    
    # Add response code categories
    if [response] >= 200 and [response] < 300 {
      mutate { add_field => { "response_category" => "success" } }
    } else if [response] >= 300 and [response] < 400 {
      mutate { add_field => { "response_category" => "redirect" } }
    } else if [response] >= 400 and [response] < 500 {
      mutate { add_field => { "response_category" => "client_error" } }
    } else if [response] >= 500 {
      mutate { add_field => { "response_category" => "server_error" } }
    }
  }
  
  # Parse Nginx error logs
  if "nginx" in [tags] and "error" in [tags] {
    grok {
      match => { 
        "message" => "%{NGINXERROR}" 
      }
    }
  }
  
  # Add environment information
  mutate {
    add_field => { 
      "environment" => "${FRAPPE_ENV:unknown}"
      "service" => "workshop-erp"
    }
  }
  
  # Remove original message if parsed successfully
  if "_grokparsefailure" not in [tags] {
    mutate { remove_field => [ "message" ] }
  }
}

output {
  # Output to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "workshop-logs-%{+YYYY.MM.dd}"
    template_name => "workshop-logs"
    template => {
      "index_patterns" => ["workshop-logs-*"],
      "settings" => {
        "number_of_shards" => 1,
        "number_of_replicas" => 0
      },
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" },
          "level" => { "type" => "keyword" },
          "severity" => { "type" => "keyword" },
          "environment" => { "type" => "keyword" },
          "service" => { "type" => "keyword" },
          "response" => { "type" => "integer" },
          "bytes" => { "type" => "integer" },
          "response_category" => { "type" => "keyword" }
        }
      }
    }
  }
  
  # Debug output to stdout (can be disabled in production)
  stdout { 
    codec => rubydebug 
  }
  
  # Alert on critical errors
  if [level] == "ERROR" or [response] >= 500 {
    email {
      to => "${ALERT_EMAIL:ops@workshop.local}"
      subject => "Workshop ERP Alert: %{level} - %{environment}"
      body => "Alert Details:\nLevel: %{level}\nMessage: %{log_message}\nTimestamp: %{@timestamp}\nEnvironment: %{environment}"
      from => "alerts@workshop.local"
      smtp_host => "${SMTP_HOST:localhost}"
      smtp_port => "${SMTP_PORT:587}"
      smtp_username => "${SMTP_USER}"
      smtp_password => "${SMTP_PASSWORD}"
    }
  }
}
