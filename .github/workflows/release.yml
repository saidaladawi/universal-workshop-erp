name: 🚀 Release Management
# إدارة الإصدارات التلقائية

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'

jobs:
  determine-version:
    name: 🔢 Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      should_release: ${{ steps.should_release.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github

      - name: Determine next version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual release
            CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            CURRENT_VERSION=${CURRENT_VERSION#v}
            
            case "${{ inputs.release_type }}" in
              major)
                NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print ($1+1)".0.0"}')
                ;;
              minor)
                NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."($2+1)".0"}')
                ;;
              patch)
                NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."($3+1)}')
                ;;
              prerelease)
                NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."($3+1)"-beta.1"}')
                ;;
            esac
            echo "version=v$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            # Automatic semantic versioning
            npx semantic-release --dry-run > semantic-output.txt 2>&1 || true
            NEXT_VERSION=$(grep -o 'The next release version is [0-9\.]*' semantic-output.txt | cut -d' ' -f6 || echo "")
            if [[ -n "$NEXT_VERSION" ]]; then
              echo "version=v$NEXT_VERSION" >> $GITHUB_OUTPUT
            else
              echo "version=" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "## Universal Workshop ERP v${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
          echo "### نظام إدارة الورش الشامل" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          
          # Features
          FEATURES=$(git log $LAST_TAG..HEAD --grep="^feat" --oneline --pretty=format:"- %s" | head -10)
          if [[ -n "$FEATURES" ]]; then
            echo "### ✨ New Features / الميزات الجديدة" >> $GITHUB_OUTPUT
            echo "$FEATURES" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
          fi
          
          # Bug fixes
          FIXES=$(git log $LAST_TAG..HEAD --grep="^fix" --oneline --pretty=format:"- %s" | head -10)
          if [[ -n "$FIXES" ]]; then
            echo "### 🐛 Bug Fixes / إصلاح الأخطاء" >> $GITHUB_OUTPUT
            echo "$FIXES" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
          fi
          
          # Other changes
          OTHER=$(git log $LAST_TAG..HEAD --grep="^feat" --grep="^fix" --invert-grep --oneline --pretty=format:"- %s" | head -5)
          if [[ -n "$OTHER" ]]; then
            echo "### 🔧 Other Changes / تغييرات أخرى" >> $GITHUB_OUTPUT
            echo "$OTHER" >> $GITHUB_OUTPUT
          fi
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Should we release?
        id: should_release
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] && [[ -n "${{ steps.version.outputs.version }}" ]]; then
            echo "result=true" >> $GITHUB_OUTPUT
          else
            echo "result=false" >> $GITHUB_OUTPUT
          fi

  build-and-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: determine-version
    if: needs.determine-version.outputs.should_release == 'true'
    
    services:
      mariadb:
        image: mariadb:10.6
        env:
          MYSQL_ROOT_PASSWORD: admin
          MYSQL_DATABASE: test_universal_workshop
          MYSQL_USER: frappe
          MYSQL_PASSWORD: frappe
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        ports:
          - 3306:3306

      redis:
        image: redis:7-alpine
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libmysqlclient-dev \
            libffi-dev \
            libssl-dev \
            python3-dev \
            wkhtmltopdf \
            xvfb \
            libfontconfig

      - name: Install frappe-bench
        run: |
          pip install frappe-bench

      - name: Initialize bench
        run: |
          bench init --frappe-branch version-15 ./test-bench
          cd test-bench

      - name: Get ERPNext
        run: |
          cd test-bench
          bench get-app --branch version-15 erpnext

      - name: Create test site
        run: |
          cd test-bench
          bench new-site test.localhost \
            --admin-password admin \
            --mariadb-root-password admin \
            --db-host 127.0.0.1 \
            --db-port 3306

      - name: Install apps
        run: |
          cd test-bench
          bench --site test.localhost install-app erpnext

      - name: Test Universal Workshop app structure
        run: |
          cd test-bench
          # Test app.py structure
          python -c "
          import sys
          sys.path.append('${{ github.workspace }}/apps/universal_workshop')
          try:
              from universal_workshop import __version__
              print(f'App version: {__version__}')
          except ImportError as e:
              print(f'Import error: {e}')
              sys.exit(1)
          "

      - name: Validate Arabic support
        run: |
          cd test-bench
          bench --site test.localhost execute "
          import frappe
          
          # Test Arabic text handling
          arabic_text = 'نظام إدارة الورش الشامل'
          print(f'Arabic text: {arabic_text}')
          
          # Test RTL support
          print('Arabic support validation: ✅')
          "

  create-release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: [determine-version, build-and-test]
    if: github.ref == 'refs/heads/main' && needs.determine-version.outputs.should_release == 'true'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Create release archives
        run: |
          mkdir -p releases
          
          # Create source archive
          git archive --format=tar.gz --prefix=universal-workshop-erp-${{ needs.determine-version.outputs.version }}/ HEAD > releases/universal-workshop-erp-${{ needs.determine-version.outputs.version }}-source.tar.gz
          
          # Create app-only archive
          if [ -d "apps/universal_workshop" ]; then
            tar -czf releases/universal-workshop-app-${{ needs.determine-version.outputs.version }}.tar.gz -C apps universal_workshop
          fi
          
          # Create installation package
          mkdir -p releases/installation-package
          cp -r scripts/ releases/installation-package/
          cp -r docs/ releases/installation-package/
          cp README.md releases/installation-package/
          cp LICENSE releases/installation-package/
          tar -czf releases/universal-workshop-erp-${{ needs.determine-version.outputs.version }}-installer.tar.gz -C releases installation-package

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.determine-version.outputs.version }}
          name: "Universal Workshop ERP ${{ needs.determine-version.outputs.version }}"
          body: |
            ${{ needs.determine-version.outputs.changelog }}
            
            ---
            
            ## Installation / التثبيت
            
            ### Quick Install / التثبيت السريع
            ```bash
            curl -fsSL https://github.com/saidaladawi/universal-workshop-erp/releases/download/${{ needs.determine-version.outputs.version }}/install.sh | bash
            ```
            
            ### Manual Install / التثبيت اليدوي
            1. Download the installer package / حمّل حزمة التثبيت
            2. Extract and run `./scripts/install.sh` / استخرج وشغّل
            
            ## Requirements / المتطلبات
            - Ubuntu 20.04+ / أوبنتو 20.04 أو أحدث
            - 4GB RAM minimum / 4 جيجابايت رام كحد أدنى
            - Python 3.10+ / بايثون 3.10 أو أحدث
            - MariaDB 10.6+ / ماريا دي بي 10.6 أو أحدث
            
          artifacts: "releases/*"
          draft: false
          prerelease: ${{ contains(needs.determine-version.outputs.version, 'beta') || contains(needs.determine-version.outputs.version, 'alpha') }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version in files
        run: |
          VERSION=${{ needs.determine-version.outputs.version }}
          VERSION_NUMBER=${VERSION#v}
          
          # Update apps/universal_workshop/__init__.py
          if [ -f "apps/universal_workshop/universal_workshop/__init__.py" ]; then
            sed -i "s/__version__ = .*/__version__ = '$VERSION_NUMBER'/" apps/universal_workshop/universal_workshop/__init__.py
          fi
          
          # Update setup.py version
          if [ -f "apps/universal_workshop/setup.py" ]; then
            sed -i "s/version=.*/version='$VERSION_NUMBER',/" apps/universal_workshop/setup.py
          fi

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git diff --staged --quiet || git commit -m "chore: bump version to ${{ needs.determine-version.outputs.version }}"
          git push

  notify-release:
    name: 📢 Notify Release
    runs-on: ubuntu-latest
    needs: [determine-version, create-release]
    if: always() && needs.create-release.result == 'success'
    
    steps:
      - name: Notify successful release
        run: |
          echo "🎉 Universal Workshop ERP ${{ needs.determine-version.outputs.version }} released successfully!"
          echo "🔗 GitHub: https://github.com/saidaladawi/universal-workshop-erp/releases/tag/${{ needs.determine-version.outputs.version }}" 