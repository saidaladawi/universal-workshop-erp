var r=Object.defineProperty;var l=(a,i,t)=>i in a?r(a,i,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[i]=t;var e=(a,i,t)=>l(a,typeof i!="symbol"?i+"":i,t);import{P as c}from"./chunks/monitor-QC5JCVak.js";class o{constructor(){e(this,"metrics",new Map);e(this,"initialized",!1)}async initialize(){this.initialized=!0,console.log("📊 Analytics Engine initialized")}updateMetrics(i){this.initialized}getCurrentMetrics(){return Object.fromEntries(this.metrics)}async generateReport(i,t){return{dateRange:i,filters:t,data:{},generatedAt:new Date}}}const n=class n{constructor(){e(this,"subscriptions",new Map)}static getInstance(){return n.instance||(n.instance=new n),n.instance}async initialize(){console.log("🔄 Real-time manager initialized (placeholder)")}subscribe(i,t){this.subscriptions.has(i)||this.subscriptions.set(i,[]),this.subscriptions.get(i)?.push(t)}};e(n,"instance",null);let s=n;class p{constructor(){e(this,"kpis",new Map)}async initialize(){console.log("📈 KPI calculator initialized (placeholder)")}updateInventoryKPIs(i){this.kpis.set("inventory",i)}updateFinancialKPIs(i){this.kpis.set("financial",i)}getCurrentKPIs(){return Object.fromEntries(this.kpis)}}class h{constructor(){e(this,"analyticsEngine",null);e(this,"performanceMonitor",null);e(this,"realTimeManager",null);e(this,"kpiCalculator",null)}async initialize(){try{this.performanceMonitor=c.getInstance(),this.performanceMonitor.measurePageLoad(),this.analyticsEngine=new o,await this.analyticsEngine.initialize(),this.realTimeManager=s.getInstance(),await this.realTimeManager.initialize(),this.kpiCalculator=new p,await this.kpiCalculator.initialize(),this.startRealTimeUpdates(),console.log("📊 Analytics system initialized successfully")}catch(i){throw console.error("❌ Failed to initialize analytics system:",i),i}}startRealTimeUpdates(){this.realTimeManager&&(this.realTimeManager.subscribe("workshop.metrics",i=>{this.handleMetricsUpdate(i)}),this.realTimeManager.subscribe("inventory.changes",i=>{this.handleInventoryUpdate(i)}),this.realTimeManager.subscribe("financial.updates",i=>{this.handleFinancialUpdate(i)}))}handleMetricsUpdate(i){this.analyticsEngine&&this.analyticsEngine.updateMetrics(i)}handleInventoryUpdate(i){this.kpiCalculator&&this.kpiCalculator.updateInventoryKPIs(i)}handleFinancialUpdate(i){this.kpiCalculator&&this.kpiCalculator.updateFinancialKPIs(i)}getAnalyticsData(){return{metrics:this.analyticsEngine?.getCurrentMetrics(),kpis:this.kpiCalculator?.getCurrentKPIs(),performance:this.performanceMonitor?.generateReport()}}async generateReport(i,t){if(!this.analyticsEngine)throw new Error("Analytics engine not initialized");return await this.analyticsEngine.generateReport(i,t)}}const u=new h;typeof window<"u"&&(window.AnalyticsApp=u);
//# sourceMappingURL=analytics.js.map
