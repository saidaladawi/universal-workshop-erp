{"version":3,"file":"main.js","sources":["../../../frontend_v2/src/core/session/session-manager.ts","../../../frontend_v2/src/localization/arabic/arabic-utils.ts","../../../frontend_v2/src/main.ts"],"sourcesContent":["/**\n * Session Manager - Universal Workshop Frontend V2\n * \n * Advanced session management with timeout handling, security features,\n * and multi-device support.\n */\n\nimport type { SessionConfig, SessionInfo, User, DeviceInfo } from '@/types/workshop'\n\nexport class SessionManager {\n  private static instance: SessionManager | null = null\n  private config: SessionConfig | null = null\n  private currentSession: SessionInfo | null = null\n  private timeoutWarningTimer: number | null = null\n  private sessionTimeoutTimer: number | null = null\n  private activityListeners: Set<() => void> = new Set()\n  private initialized = false\n\n  private constructor() {\n    this.bindActivityListeners()\n  }\n\n  /**\n   * Get singleton instance\n   */\n  static getInstance(): SessionManager {\n    if (!SessionManager.instance) {\n      SessionManager.instance = new SessionManager()\n    }\n    return SessionManager.instance\n  }\n\n  /**\n   * Initialize session management\n   */\n  async initialize(): Promise<void> {\n    try {\n      await this.loadSessionConfig()\n      await this.loadCurrentSession()\n      this.startSessionMonitoring()\n      this.initialized = true\n      \n      console.log('üîê Session manager initialized')\n    } catch (error) {\n      console.error('Failed to initialize session manager:', error)\n      this.loadDefaultConfig()\n    }\n  }\n\n  /**\n   * Load session configuration from server\n   */\n  private async loadSessionConfig(): Promise<void> {\n    try {\n      if (typeof window !== 'undefined' && window.frappe?.call) {\n        const response = await window.frappe.call({\n          method: 'universal_workshop.api.get_session_config'\n        })\n        this.config = response.data\n      } else {\n        this.loadDefaultConfig()\n      }\n    } catch (error) {\n      console.warn('Failed to load session config, using defaults:', error)\n      this.loadDefaultConfig()\n    }\n  }\n\n  /**\n   * Load default session configuration\n   */\n  private loadDefaultConfig(): void {\n    this.config = {\n      timeout: 30 * 60 * 1000, // 30 minutes\n      warningTime: 5 * 60 * 1000, // 5 minutes before timeout\n      extendable: true,\n      multiDevice: true,\n      securityLevel: 'enhanced'\n    }\n  }\n\n  /**\n   * Load current session information\n   */\n  private async loadCurrentSession(): Promise<void> {\n    try {\n      if (typeof window !== 'undefined' && window.frappe?.call) {\n        const response = await window.frappe.call({\n          method: 'universal_workshop.api.get_current_session'\n        })\n        this.currentSession = response.data\n      } else {\n        // Create mock session for development\n        this.currentSession = this.createMockSession()\n      }\n    } catch (error) {\n      console.warn('Failed to load current session:', error)\n      this.currentSession = this.createMockSession()\n    }\n  }\n\n  /**\n   * Create mock session for development/testing\n   */\n  private createMockSession(): SessionInfo {\n    const now = new Date()\n    return {\n      id: 'mock-session-' + Date.now(),\n      userId: 'test-user',\n      deviceInfo: this.getDeviceInfo(),\n      startTime: now,\n      lastActivity: now,\n      expiresAt: new Date(now.getTime() + (this.config?.timeout || 30 * 60 * 1000)),\n      isActive: true\n    }\n  }\n\n  /**\n   * Start session monitoring\n   */\n  private startSessionMonitoring(): void {\n    if (!this.config || !this.currentSession) return\n\n    this.resetSessionTimers()\n    this.trackUserActivity()\n  }\n\n  /**\n   * Reset session timeout timers\n   */\n  private resetSessionTimers(): void {\n    if (!this.config) return\n\n    // Clear existing timers\n    if (this.timeoutWarningTimer) {\n      clearTimeout(this.timeoutWarningTimer)\n    }\n    if (this.sessionTimeoutTimer) {\n      clearTimeout(this.sessionTimeoutTimer)\n    }\n\n    // Set warning timer\n    this.timeoutWarningTimer = window.setTimeout(() => {\n      this.showTimeoutWarning()\n    }, this.config.timeout - this.config.warningTime)\n\n    // Set session timeout timer\n    this.sessionTimeoutTimer = window.setTimeout(() => {\n      this.handleSessionTimeout()\n    }, this.config.timeout)\n  }\n\n  /**\n   * Show timeout warning to user\n   */\n  private showTimeoutWarning(): void {\n    const warningTime = Math.floor((this.config?.warningTime || 0) / 1000 / 60)\n    \n    if (typeof window !== 'undefined' && window.frappe?.msgprint) {\n      window.frappe.msgprint(\n        `Your session will expire in ${warningTime} minutes. Do you want to extend it?`,\n        'Session Timeout Warning'\n      )\n    } else {\n      // Fallback warning\n      const extend = confirm(\n        `Your session will expire in ${warningTime} minutes. Do you want to extend it?`\n      )\n      if (extend) {\n        this.extendSession()\n      }\n    }\n  }\n\n  /**\n   * Handle session timeout\n   */\n  private handleSessionTimeout(): void {\n    console.warn('‚è∞ Session has timed out')\n    \n    this.currentSession = null\n    this.clearTimers()\n    \n    // Redirect to login or show timeout message\n    if (typeof window !== 'undefined') {\n      if (window.frappe) {\n        window.frappe.msgprint('Your session has expired. Please log in again.', 'Session Expired')\n        // Redirect to login page\n        setTimeout(() => {\n          window.location.href = '/login'\n        }, 2000)\n      } else {\n        alert('Your session has expired. Please log in again.')\n        window.location.reload()\n      }\n    }\n  }\n\n  /**\n   * Extend current session\n   */\n  async extendSession(): Promise<void> {\n    if (!this.currentSession || !this.config) return\n\n    try {\n      if (typeof window !== 'undefined' && window.frappe?.call) {\n        const response = await window.frappe.call({\n          method: 'universal_workshop.api.extend_session',\n          args: { session_id: this.currentSession.id }\n        })\n        \n        if (response.success) {\n          this.currentSession.expiresAt = new Date(response.data.expiresAt)\n          this.resetSessionTimers()\n          console.log('‚úÖ Session extended successfully')\n        }\n      } else {\n        // Mock extension for development\n        this.currentSession.expiresAt = new Date(\n          Date.now() + (this.config.timeout)\n        )\n        this.resetSessionTimers()\n      }\n    } catch (error) {\n      console.error('Failed to extend session:', error)\n    }\n  }\n\n  /**\n   * Track user activity\n   */\n  private trackUserActivity(): void {\n    const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart']\n    \n    const handleActivity = () => {\n      this.updateLastActivity()\n    }\n\n    activityEvents.forEach(event => {\n      document.addEventListener(event, handleActivity, true)\n    })\n\n    // Store reference to remove listeners later\n    this.activityListeners.add(() => {\n      activityEvents.forEach(event => {\n        document.removeEventListener(event, handleActivity, true)\n      })\n    })\n  }\n\n  /**\n   * Update last activity timestamp\n   */\n  private updateLastActivity(): void {\n    if (!this.currentSession) return\n\n    this.currentSession.lastActivity = new Date()\n    \n    // Reset timers on activity\n    if (this.config?.extendable) {\n      this.resetSessionTimers()\n    }\n  }\n\n  /**\n   * Bind activity listeners\n   */\n  private bindActivityListeners(): void {\n    // Listen for page visibility changes\n    document.addEventListener('visibilitychange', () => {\n      if (document.visibilityState === 'visible') {\n        this.checkSessionValidity()\n      }\n    })\n\n    // Listen for online/offline events\n    window.addEventListener('online', () => {\n      this.checkSessionValidity()\n    })\n  }\n\n  /**\n   * Check if current session is still valid\n   */\n  private async checkSessionValidity(): Promise<void> {\n    if (!this.currentSession) return\n\n    try {\n      if (typeof window !== 'undefined' && window.frappe?.call) {\n        const response = await window.frappe.call({\n          method: 'universal_workshop.api.validate_session',\n          args: { session_id: this.currentSession.id }\n        })\n        \n        if (!response.data.valid) {\n          this.handleSessionTimeout()\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to validate session:', error)\n    }\n  }\n\n  /**\n   * Get device information\n   */\n  private getDeviceInfo(): DeviceInfo {\n    const userAgent = navigator.userAgent\n    const platform = navigator.platform\n    \n    let deviceType: DeviceInfo['type'] = 'desktop'\n    if (/Mobile|Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent)) {\n      deviceType = /iPad/i.test(userAgent) ? 'tablet' : 'mobile'\n    }\n\n    let browser = 'Unknown'\n    if (userAgent.includes('Chrome')) browser = 'Chrome'\n    else if (userAgent.includes('Firefox')) browser = 'Firefox'\n    else if (userAgent.includes('Safari')) browser = 'Safari'\n    else if (userAgent.includes('Edge')) browser = 'Edge'\n\n    let os = 'Unknown'\n    if (platform.includes('Win')) os = 'Windows'\n    else if (platform.includes('Mac')) os = 'macOS'\n    else if (platform.includes('Linux')) os = 'Linux'\n    else if (userAgent.includes('Android')) os = 'Android'\n    else if (userAgent.includes('iPhone') || userAgent.includes('iPad')) os = 'iOS'\n\n    return {\n      type: deviceType,\n      browser,\n      os,\n      screenResolution: `${screen.width}x${screen.height}`,\n      userAgent\n    }\n  }\n\n  /**\n   * Clear all timers\n   */\n  private clearTimers(): void {\n    if (this.timeoutWarningTimer) {\n      clearTimeout(this.timeoutWarningTimer)\n      this.timeoutWarningTimer = null\n    }\n    if (this.sessionTimeoutTimer) {\n      clearTimeout(this.sessionTimeoutTimer)\n      this.sessionTimeoutTimer = null\n    }\n  }\n\n  /**\n   * Get current session information\n   */\n  getCurrentSession(): SessionInfo | null {\n    return this.currentSession\n  }\n\n  /**\n   * Get session configuration\n   */\n  getConfig(): SessionConfig | null {\n    return this.config\n  }\n\n  /**\n   * Check if session is active\n   */\n  isSessionActive(): boolean {\n    return this.currentSession?.isActive || false\n  }\n\n  /**\n   * Get time until session expires\n   */\n  getTimeUntilExpiry(): number {\n    if (!this.currentSession) return 0\n    return Math.max(0, this.currentSession.expiresAt.getTime() - Date.now())\n  }\n\n  /**\n   * Cleanup session manager\n   */\n  destroy(): void {\n    this.clearTimers()\n    this.activityListeners.forEach(cleanup => cleanup())\n    this.activityListeners.clear()\n    this.currentSession = null\n    this.initialized = false\n  }\n}\n\nexport default SessionManager","/**\n * Arabic Utilities - Universal Workshop Frontend V2\n * \n * Comprehensive Arabic language support including RTL layout,\n * number formatting, text direction detection, and localization helpers.\n */\n\nimport type { Direction, Language } from '@/types/workshop'\n\nexport class ArabicUtils {\n  private static readonly ARABIC_NUMERALS = ['Ÿ†', 'Ÿ°', 'Ÿ¢', 'Ÿ£', 'Ÿ§', 'Ÿ•', 'Ÿ¶', 'Ÿß', 'Ÿ®', 'Ÿ©']\n  private static readonly LATIN_NUMERALS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n  \n  private static readonly ARABIC_UNICODE_RANGES = [\n    [0x0600, 0x06FF], // Arabic\n    [0x0750, 0x077F], // Arabic Supplement\n    [0x08A0, 0x08FF], // Arabic Extended-A\n    [0xFB50, 0xFDFF], // Arabic Presentation Forms-A\n    [0xFE70, 0xFEFF], // Arabic Presentation Forms-B\n  ]\n\n  /**\n   * Convert Latin numerals to Arabic numerals\n   */\n  static convertToArabicNumerals(text: string): string {\n    return text.replace(/[0-9]/g, (digit) => \n      this.ARABIC_NUMERALS[parseInt(digit, 10)]\n    )\n  }\n\n  /**\n   * Convert Arabic numerals to Latin numerals\n   */\n  static convertToLatinNumerals(text: string): string {\n    return text.replace(/[Ÿ†-Ÿ©]/g, (digit) => \n      this.LATIN_NUMERALS[this.ARABIC_NUMERALS.indexOf(digit)]\n    )\n  }\n\n  /**\n   * Detect if text contains Arabic characters\n   */\n  static containsArabic(text: string): boolean {\n    return this.ARABIC_UNICODE_RANGES.some(([start, end]) => {\n      for (let i = 0; i < text.length; i++) {\n        const charCode = text.charCodeAt(i)\n        if (charCode >= start && charCode <= end) {\n          return true\n        }\n      }\n      return false\n    })\n  }\n\n  /**\n   * Detect text direction based on content\n   */\n  static getTextDirection(text: string): Direction {\n    if (!text || text.trim().length === 0) {\n      return 'ltr'\n    }\n\n    return this.containsArabic(text) ? 'rtl' : 'ltr'\n  }\n\n  /**\n   * Check if current locale is Arabic\n   */\n  static isArabicLocale(locale?: string): boolean {\n    const currentLocale = locale || \n      document.documentElement.lang || \n      navigator.language || \n      'en'\n    \n    return currentLocale.toLowerCase().startsWith('ar')\n  }\n\n  /**\n   * Format number according to Arabic locale\n   */\n  static formatNumber(\n    number: number, \n    options: {\n      useArabicNumerals?: boolean\n      currency?: string\n      style?: 'decimal' | 'currency' | 'percent'\n      minimumFractionDigits?: number\n      maximumFractionDigits?: number\n    } = {}\n  ): string {\n    const {\n      useArabicNumerals = true,\n      currency = 'OMR',\n      style = 'decimal',\n      minimumFractionDigits,\n      maximumFractionDigits\n    } = options\n\n    let formatted: string\n\n    if (style === 'currency') {\n      formatted = new Intl.NumberFormat('ar-OM', {\n        style: 'currency',\n        currency,\n        minimumFractionDigits,\n        maximumFractionDigits\n      }).format(number)\n    } else if (style === 'percent') {\n      formatted = new Intl.NumberFormat('ar-OM', {\n        style: 'percent',\n        minimumFractionDigits,\n        maximumFractionDigits\n      }).format(number)\n    } else {\n      formatted = new Intl.NumberFormat('ar-OM', {\n        minimumFractionDigits,\n        maximumFractionDigits\n      }).format(number)\n    }\n\n    return useArabicNumerals ? this.convertToArabicNumerals(formatted) : formatted\n  }\n\n  /**\n   * Format currency for Omani market\n   */\n  static formatCurrency(\n    amount: number,\n    options: {\n      useArabicNumerals?: boolean\n      showCurrencySymbol?: boolean\n      precision?: number\n    } = {}\n  ): string {\n    const {\n      useArabicNumerals = true,\n      showCurrencySymbol = true,\n      precision = 3\n    } = options\n\n    const formatted = this.formatNumber(amount, {\n      style: showCurrencySymbol ? 'currency' : 'decimal',\n      currency: 'OMR',\n      minimumFractionDigits: precision,\n      maximumFractionDigits: precision,\n      useArabicNumerals\n    })\n\n    return formatted\n  }\n\n  /**\n   * Format date according to Arabic locale\n   */\n  static formatDate(\n    date: Date,\n    options: {\n      style?: 'short' | 'medium' | 'long' | 'full'\n      useArabicNumerals?: boolean\n      includeTime?: boolean\n    } = {}\n  ): string {\n    const {\n      style = 'medium',\n      useArabicNumerals = true,\n      includeTime = false\n    } = options\n\n    const formatOptions: Intl.DateTimeFormatOptions = {\n      dateStyle: style as any\n    }\n\n    if (includeTime) {\n      formatOptions.timeStyle = 'short'\n    }\n\n    let formatted = new Intl.DateTimeFormat('ar-OM', formatOptions).format(date)\n\n    return useArabicNumerals ? this.convertToArabicNumerals(formatted) : formatted\n  }\n\n  /**\n   * Apply RTL styling to element\n   */\n  static applyRTLStyling(element: HTMLElement): void {\n    element.dir = 'rtl'\n    element.style.textAlign = 'right'\n    element.classList.add('rtl-element')\n  }\n\n  /**\n   * Remove RTL styling from element\n   */\n  static removeRTLStyling(element: HTMLElement): void {\n    element.dir = 'ltr'\n    element.style.textAlign = 'left'\n    element.classList.remove('rtl-element')\n  }\n\n  /**\n   * Auto-detect and apply text direction to element\n   */\n  static autoApplyDirection(element: HTMLElement, text?: string): void {\n    const textToAnalyze = text || element.textContent || element.innerText || ''\n    const direction = this.getTextDirection(textToAnalyze)\n    \n    element.dir = direction\n    element.style.textAlign = direction === 'rtl' ? 'right' : 'left'\n  }\n\n  /**\n   * Get plural form for Arabic text\n   */\n  static getArabicPlural(\n    count: number,\n    singular: string,\n    dual?: string,\n    plural?: string\n  ): string {\n    if (count === 0) {\n      return plural || singular\n    } else if (count === 1) {\n      return singular\n    } else if (count === 2 && dual) {\n      return dual\n    } else {\n      return plural || singular\n    }\n  }\n\n  /**\n   * Validate Arabic text input\n   */\n  static isValidArabicText(text: string): boolean {\n    if (!text || text.trim().length === 0) {\n      return false\n    }\n\n    // Check if text contains valid Arabic characters\n    const hasArabic = this.containsArabic(text)\n    \n    // Allow numbers, spaces, and basic punctuation\n    const allowedPattern = /^[\\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\uFB50-\\uFDFF\\uFE70-\\uFEFF\\s\\d\\.\\,\\!\\?\\-\\(\\)]+$/\n    \n    return hasArabic && allowedPattern.test(text)\n  }\n\n  /**\n   * Clean Arabic text by removing unwanted characters\n   */\n  static cleanArabicText(text: string): string {\n    return text\n      .replace(/[\\u200C\\u200D\\u200E\\u200F]/g, '') // Remove invisible characters\n      .replace(/\\s+/g, ' ') // Normalize whitespace\n      .trim()\n  }\n\n  /**\n   * Get RTL-aware padding/margin values\n   */\n  static getRTLSpacing(\n    top: string,\n    right: string,\n    bottom: string,\n    left: string,\n    isRTL: boolean = false\n  ): string {\n    if (isRTL) {\n      return `${top} ${left} ${bottom} ${right}`\n    }\n    return `${top} ${right} ${bottom} ${left}`\n  }\n\n  /**\n   * Convert CSS property for RTL\n   */\n  static convertCSSForRTL(property: string, value: string, isRTL: boolean = false): { property: string; value: string } {\n    if (!isRTL) {\n      return { property, value }\n    }\n\n    // Handle directional properties\n    const rtlMappings: Record<string, string> = {\n      'padding-left': 'padding-right',\n      'padding-right': 'padding-left',\n      'margin-left': 'margin-right',\n      'margin-right': 'margin-left',\n      'border-left': 'border-right',\n      'border-right': 'border-left',\n      'left': 'right',\n      'right': 'left',\n      'text-align': value === 'left' ? 'right' : value === 'right' ? 'left' : value\n    }\n\n    const mappedProperty = rtlMappings[property] || property\n    const mappedValue = property === 'text-align' ? rtlMappings[property] : value\n\n    return { \n      property: mappedProperty, \n      value: mappedValue || value \n    }\n  }\n\n  /**\n   * Setup global Arabic environment\n   */\n  static setupGlobalArabicEnvironment(): void {\n    const isArabic = this.isArabicLocale()\n    \n    if (isArabic) {\n      document.documentElement.dir = 'rtl'\n      document.documentElement.lang = 'ar'\n      document.documentElement.classList.add('arabic-layout')\n      \n      // Add RTL stylesheet if it exists\n      const rtlLink = document.createElement('link')\n      rtlLink.rel = 'stylesheet'\n      rtlLink.href = '/assets/universal_workshop/css/arabic-rtl.css'\n      rtlLink.onload = () => console.log('‚úÖ Arabic RTL styles loaded')\n      rtlLink.onerror = () => console.log('‚ö†Ô∏è Arabic RTL styles not found')\n      document.head.appendChild(rtlLink)\n    }\n  }\n\n  /**\n   * Create bilingual text element\n   */\n  static createBilingualElement(\n    englishText: string,\n    arabicText: string,\n    preferArabic: boolean = false\n  ): HTMLElement {\n    const container = document.createElement('div')\n    container.className = 'bilingual-text'\n    \n    const enElement = document.createElement('span')\n    enElement.className = 'text-en'\n    enElement.textContent = englishText\n    enElement.dir = 'ltr'\n    \n    const arElement = document.createElement('span')\n    arElement.className = 'text-ar'\n    arElement.textContent = arabicText\n    arElement.dir = 'rtl'\n    \n    if (preferArabic) {\n      container.appendChild(arElement)\n      container.appendChild(enElement)\n    } else {\n      container.appendChild(enElement)\n      container.appendChild(arElement)\n    }\n    \n    return container\n  }\n}\n\nexport default ArabicUtils","/**\n * Main Entry Point - Universal Workshop Frontend V2\n * \n * This is the primary entry point for the modernized frontend architecture.\n * It initializes the core systems and provides the foundation for all other modules.\n */\n\nimport { createApp } from 'vue'\nimport type { App } from 'vue'\n\n// Core system imports\nimport { BrandingSystem } from '@/branding/branding-system'\nimport { SessionManager } from '@/core/session/session-manager'\nimport { ArabicUtils } from '@/localization/arabic/arabic-utils'\nimport { PerformanceMonitor } from '@/utils/performance/monitor'\n\n// Global styles\nimport '@/styles/design-system/tokens.scss'\nimport '@/styles/base/reset.scss'\nimport '@/styles/base/typography.scss'\nimport '@/styles/themes/default.scss'\n\n/**\n * Main application class that orchestrates the frontend system\n */\nclass UniversalWorkshopApp {\n  private app: App | null = null\n  private brandingSystem: BrandingSystem | null = null\n  private sessionManager: SessionManager | null = null\n  private performanceMonitor: PerformanceMonitor | null = null\n\n  /**\n   * Initialize the application with all required systems\n   */\n  async initialize(): Promise<void> {\n    try {\n      // Start performance monitoring\n      this.performanceMonitor = PerformanceMonitor.getInstance()\n      this.performanceMonitor.measurePageLoad()\n\n      // Initialize core systems\n      await this.initializeBrandingSystem()\n      await this.initializeSessionManager()\n      await this.initializeArabicSupport()\n\n      console.log('üöÄ Universal Workshop Frontend V2 initialized successfully')\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Universal Workshop Frontend V2:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Initialize the dynamic branding system\n   */\n  private async initializeBrandingSystem(): Promise<void> {\n    if (!window.frappe?.boot?.user) {\n      console.warn('‚ö†Ô∏è Frappe not available, using default branding')\n      return\n    }\n\n    this.brandingSystem = new BrandingSystem()\n    await this.brandingSystem.initialize()\n  }\n\n  /**\n   * Initialize session management\n   */\n  private async initializeSessionManager(): Promise<void> {\n    this.sessionManager = SessionManager.getInstance()\n    await this.sessionManager.initialize()\n  }\n\n  /**\n   * Initialize Arabic/RTL support\n   */\n  private async initializeArabicSupport(): Promise<void> {\n    // Detect document language and apply RTL if needed\n    const isArabic = ArabicUtils.isArabicLocale(document.documentElement.lang)\n    if (isArabic) {\n      document.documentElement.dir = 'rtl'\n      document.documentElement.classList.add('arabic-layout')\n    }\n  }\n\n  /**\n   * Create and mount Vue application if needed\n   */\n  createVueApp(component: any, mountPoint: string): App {\n    this.app = createApp(component)\n    \n    // Add global properties\n    this.app.config.globalProperties.$branding = this.brandingSystem\n    this.app.config.globalProperties.$session = this.sessionManager\n    this.app.config.globalProperties.$arabic = ArabicUtils\n\n    // Mount the application\n    this.app.mount(mountPoint)\n    \n    return this.app\n  }\n\n  /**\n   * Get the current app instance\n   */\n  getApp(): App | null {\n    return this.app\n  }\n}\n\n// Global instance\nconst universalWorkshopApp = new UniversalWorkshopApp()\n\n// Initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', () => {\n    universalWorkshopApp.initialize()\n  })\n} else {\n  universalWorkshopApp.initialize()\n}\n\n// Export for use by other modules\nexport { universalWorkshopApp, universalWorkshopApp as default, UniversalWorkshopApp }\n\n// Global declaration for browser console access\nif (typeof window !== 'undefined') {\n  (window as any).UniversalWorkshopApp = universalWorkshopApp\n}"],"names":["_SessionManager","__publicField","error","response","now","warningTime","activityEvents","handleActivity","event","userAgent","platform","deviceType","browser","os","cleanup","SessionManager","ArabicUtils","text","digit","start","end","i","charCode","locale","number","options","useArabicNumerals","currency","style","minimumFractionDigits","maximumFractionDigits","formatted","amount","showCurrencySymbol","precision","date","includeTime","formatOptions","element","textToAnalyze","direction","count","singular","dual","plural","top","right","bottom","left","isRTL","property","value","rtlMappings","mappedProperty","mappedValue","rtlLink","englishText","arabicText","preferArabic","container","enElement","arElement","UniversalWorkshopApp","PerformanceMonitor","BrandingSystem","component","mountPoint","createApp","universalWorkshopApp"],"mappings":"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"}