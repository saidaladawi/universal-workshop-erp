{"version":3,"file":"monitor-QC5JCVak.js","sources":["../../../../frontend_v2/src/utils/performance/monitor.ts"],"sourcesContent":["/**\n * Performance Monitor - Universal Workshop Frontend V2\n * \n * Comprehensive performance monitoring with metrics collection,\n * real-time analysis, and optimization recommendations.\n */\n\nexport interface PerformanceMetric {\n  name: string\n  value: number\n  timestamp: number\n  category: 'loading' | 'runtime' | 'user' | 'resource'\n  metadata?: Record<string, any>\n}\n\nexport interface PerformanceReport {\n  totalMetrics: number\n  averageLoadTime: number\n  averageRenderTime: number\n  memoryUsage: number\n  recommendations: string[]\n  metrics: PerformanceMetric[]\n  generatedAt: Date\n}\n\nexport class PerformanceMonitor {\n  private static instance: PerformanceMonitor | null = null\n  private metrics: PerformanceMetric[] = []\n  private observers: Set<PerformanceObserver> = new Set()\n  private isMonitoring = false\n  private startTime = performance.now()\n\n  private constructor() {\n    this.setupPerformanceObservers()\n  }\n\n  /**\n   * Get singleton instance\n   */\n  static getInstance(): PerformanceMonitor {\n    if (!PerformanceMonitor.instance) {\n      PerformanceMonitor.instance = new PerformanceMonitor()\n    }\n    return PerformanceMonitor.instance\n  }\n\n  /**\n   * Start performance monitoring\n   */\n  startMonitoring(): void {\n    if (this.isMonitoring) return\n\n    this.isMonitoring = true\n    this.startTime = performance.now()\n    this.setupResourceTiming()\n    this.setupUserTiming()\n    this.setupNavigationTiming()\n    \n    console.log('📊 Performance monitoring started')\n  }\n\n  /**\n   * Stop performance monitoring\n   */\n  stopMonitoring(): void {\n    this.isMonitoring = false\n    this.observers.forEach(observer => observer.disconnect())\n    this.observers.clear()\n    \n    console.log('⏹️ Performance monitoring stopped')\n  }\n\n  /**\n   * Measure page load performance\n   */\n  measurePageLoad(): void {\n    if (document.readyState === 'complete') {\n      this.collectLoadMetrics()\n    } else {\n      window.addEventListener('load', () => {\n        this.collectLoadMetrics()\n      })\n    }\n  }\n\n  /**\n   * Collect page load metrics\n   */\n  private collectLoadMetrics(): void {\n    const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming\n\n    if (navigation) {\n      // DNS lookup time\n      this.addMetric({\n        name: 'dns_lookup_time',\n        value: navigation.domainLookupEnd - navigation.domainLookupStart,\n        timestamp: Date.now(),\n        category: 'loading',\n        metadata: { type: 'dns' }\n      })\n\n      // Connection time\n      this.addMetric({\n        name: 'connection_time',\n        value: navigation.connectEnd - navigation.connectStart,\n        timestamp: Date.now(),\n        category: 'loading',\n        metadata: { type: 'connection' }\n      })\n\n      // First byte time (TTFB)\n      this.addMetric({\n        name: 'time_to_first_byte',\n        value: navigation.responseStart - navigation.requestStart,\n        timestamp: Date.now(),\n        category: 'loading',\n        metadata: { type: 'ttfb' }\n      })\n\n      // DOM content loaded\n      this.addMetric({\n        name: 'dom_content_loaded',\n        value: navigation.domContentLoadedEventEnd - navigation.navigationStart,\n        timestamp: Date.now(),\n        category: 'loading',\n        metadata: { type: 'dom' }\n      })\n\n      // Total load time\n      this.addMetric({\n        name: 'total_load_time',\n        value: navigation.loadEventEnd - navigation.navigationStart,\n        timestamp: Date.now(),\n        category: 'loading',\n        metadata: { type: 'total' }\n      })\n    }\n\n    // Core Web Vitals\n    this.measureCoreWebVitals()\n  }\n\n  /**\n   * Measure Core Web Vitals\n   */\n  private measureCoreWebVitals(): void {\n    // Largest Contentful Paint (LCP)\n    if ('PerformanceObserver' in window) {\n      const lcpObserver = new PerformanceObserver((list) => {\n        const entries = list.getEntries()\n        const lastEntry = entries[entries.length - 1] as any\n        \n        this.addMetric({\n          name: 'largest_contentful_paint',\n          value: lastEntry.startTime,\n          timestamp: Date.now(),\n          category: 'user',\n          metadata: { \n            type: 'lcp',\n            element: lastEntry.element?.tagName \n          }\n        })\n      })\n\n      try {\n        lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] })\n        this.observers.add(lcpObserver)\n      } catch (e) {\n        console.warn('LCP observation not supported')\n      }\n\n      // First Input Delay (FID)\n      const fidObserver = new PerformanceObserver((list) => {\n        const entries = list.getEntries()\n        entries.forEach((entry: any) => {\n          this.addMetric({\n            name: 'first_input_delay',\n            value: entry.processingStart - entry.startTime,\n            timestamp: Date.now(),\n            category: 'user',\n            metadata: {\n              type: 'fid',\n              eventType: entry.name\n            }\n          })\n        })\n      })\n\n      try {\n        fidObserver.observe({ entryTypes: ['first-input'] })\n        this.observers.add(fidObserver)\n      } catch (e) {\n        console.warn('FID observation not supported')\n      }\n\n      // Cumulative Layout Shift (CLS)\n      const clsObserver = new PerformanceObserver((list) => {\n        let clsValue = 0\n        const entries = list.getEntries()\n        \n        entries.forEach((entry: any) => {\n          if (!entry.hadRecentInput) {\n            clsValue += entry.value\n          }\n        })\n\n        this.addMetric({\n          name: 'cumulative_layout_shift',\n          value: clsValue,\n          timestamp: Date.now(),\n          category: 'user',\n          metadata: { \n            type: 'cls',\n            entryCount: entries.length \n          }\n        })\n      })\n\n      try {\n        clsObserver.observe({ entryTypes: ['layout-shift'] })\n        this.observers.add(clsObserver)\n      } catch (e) {\n        console.warn('CLS observation not supported')\n      }\n    }\n  }\n\n  /**\n   * Measure component render time\n   */\n  measureComponentRender(componentName: string, renderTime: number): void {\n    this.addMetric({\n      name: 'component_render_time',\n      value: renderTime,\n      timestamp: Date.now(),\n      category: 'runtime',\n      metadata: {\n        component: componentName,\n        type: 'render'\n      }\n    })\n  }\n\n  /**\n   * Measure API call performance\n   */\n  measureApiCall(endpoint: string, duration: number, success: boolean): void {\n    this.addMetric({\n      name: 'api_call_duration',\n      value: duration,\n      timestamp: Date.now(),\n      category: 'runtime',\n      metadata: {\n        endpoint,\n        success,\n        type: 'api'\n      }\n    })\n  }\n\n  /**\n   * Measure memory usage\n   */\n  measureMemoryUsage(): void {\n    if ('memory' in performance) {\n      const memory = (performance as any).memory\n      \n      this.addMetric({\n        name: 'memory_used_js_heap',\n        value: memory.usedJSHeapSize,\n        timestamp: Date.now(),\n        category: 'runtime',\n        metadata: {\n          totalJSHeapSize: memory.totalJSHeapSize,\n          jsHeapSizeLimit: memory.jsHeapSizeLimit,\n          type: 'memory'\n        }\n      })\n    }\n  }\n\n  /**\n   * Setup performance observers\n   */\n  private setupPerformanceObservers(): void {\n    if (!('PerformanceObserver' in window)) return\n\n    // Monitor resource loading\n    this.setupResourceTiming()\n    // Monitor user timing marks\n    this.setupUserTiming()\n    // Monitor navigation timing\n    this.setupNavigationTiming()\n  }\n\n  /**\n   * Setup resource timing monitoring\n   */\n  private setupResourceTiming(): void {\n    if (!('PerformanceObserver' in window)) return\n\n    const resourceObserver = new PerformanceObserver((list) => {\n      const entries = list.getEntries()\n      entries.forEach((entry: PerformanceResourceTiming) => {\n        this.addMetric({\n          name: 'resource_load_time',\n          value: entry.responseEnd - entry.startTime,\n          timestamp: Date.now(),\n          category: 'resource',\n          metadata: {\n            name: entry.name,\n            type: entry.initiatorType,\n            size: entry.transferSize,\n            cached: entry.transferSize === 0\n          }\n        })\n      })\n    })\n\n    try {\n      resourceObserver.observe({ entryTypes: ['resource'] })\n      this.observers.add(resourceObserver)\n    } catch (e) {\n      console.warn('Resource timing observation not supported')\n    }\n  }\n\n  /**\n   * Setup user timing monitoring\n   */\n  private setupUserTiming(): void {\n    if (!('PerformanceObserver' in window)) return\n\n    const userTimingObserver = new PerformanceObserver((list) => {\n      const entries = list.getEntries()\n      entries.forEach((entry) => {\n        this.addMetric({\n          name: 'user_timing',\n          value: entry.duration || 0,\n          timestamp: Date.now(),\n          category: 'user',\n          metadata: {\n            name: entry.name,\n            type: entry.entryType,\n            startTime: entry.startTime\n          }\n        })\n      })\n    })\n\n    try {\n      userTimingObserver.observe({ entryTypes: ['mark', 'measure'] })\n      this.observers.add(userTimingObserver)\n    } catch (e) {\n      console.warn('User timing observation not supported')\n    }\n  }\n\n  /**\n   * Setup navigation timing monitoring\n   */\n  private setupNavigationTiming(): void {\n    if (!('PerformanceObserver' in window)) return\n\n    const navigationObserver = new PerformanceObserver((list) => {\n      const entries = list.getEntries()\n      entries.forEach((entry: PerformanceNavigationTiming) => {\n        this.addMetric({\n          name: 'navigation_timing',\n          value: entry.loadEventEnd - entry.navigationStart,\n          timestamp: Date.now(),\n          category: 'loading',\n          metadata: {\n            type: entry.type,\n            redirectCount: entry.redirectCount,\n            transferSize: entry.transferSize\n          }\n        })\n      })\n    })\n\n    try {\n      navigationObserver.observe({ entryTypes: ['navigation'] })\n      this.observers.add(navigationObserver)\n    } catch (e) {\n      console.warn('Navigation timing observation not supported')\n    }\n  }\n\n  /**\n   * Add performance metric\n   */\n  private addMetric(metric: PerformanceMetric): void {\n    this.metrics.push(metric)\n    \n    // Keep only last 1000 metrics to prevent memory leaks\n    if (this.metrics.length > 1000) {\n      this.metrics = this.metrics.slice(-1000)\n    }\n\n    // Report to server if configured\n    this.reportMetric(metric)\n  }\n\n  /**\n   * Report metric to server\n   */\n  private reportMetric(metric: PerformanceMetric): void {\n    // Only report critical metrics to avoid spam\n    const criticalMetrics = [\n      'largest_contentful_paint',\n      'first_input_delay',\n      'cumulative_layout_shift',\n      'total_load_time'\n    ]\n\n    if (criticalMetrics.includes(metric.name)) {\n      try {\n        if (typeof window !== 'undefined' && window.frappe?.call) {\n          window.frappe.call({\n            method: 'universal_workshop.analytics.record_performance_metric',\n            args: { metric }\n          }).catch(() => {\n            // Silently fail to avoid blocking UI\n          })\n        }\n      } catch (error) {\n        // Silently handle errors\n      }\n    }\n  }\n\n  /**\n   * Get current performance metrics\n   */\n  getCurrentMetrics(): PerformanceMetric[] {\n    return [...this.metrics]\n  }\n\n  /**\n   * Get metrics by category\n   */\n  getMetricsByCategory(category: PerformanceMetric['category']): PerformanceMetric[] {\n    return this.metrics.filter(metric => metric.category === category)\n  }\n\n  /**\n   * Get average metric value\n   */\n  getAverageMetric(metricName: string): number {\n    const relevantMetrics = this.metrics.filter(m => m.name === metricName)\n    if (relevantMetrics.length === 0) return 0\n    \n    const sum = relevantMetrics.reduce((acc, metric) => acc + metric.value, 0)\n    return sum / relevantMetrics.length\n  }\n\n  /**\n   * Generate comprehensive performance report\n   */\n  generateReport(): PerformanceReport {\n    const loadingMetrics = this.getMetricsByCategory('loading')\n    const runtimeMetrics = this.getMetricsByCategory('runtime')\n    \n    const averageLoadTime = this.getAverageMetric('total_load_time')\n    const averageRenderTime = this.getAverageMetric('component_render_time')\n    \n    let memoryUsage = 0\n    if ('memory' in performance) {\n      memoryUsage = (performance as any).memory.usedJSHeapSize\n    }\n\n    const recommendations = this.generateRecommendations()\n\n    return {\n      totalMetrics: this.metrics.length,\n      averageLoadTime,\n      averageRenderTime,\n      memoryUsage,\n      recommendations,\n      metrics: this.getCurrentMetrics(),\n      generatedAt: new Date()\n    }\n  }\n\n  /**\n   * Generate performance recommendations\n   */\n  private generateRecommendations(): string[] {\n    const recommendations: string[] = []\n    \n    const lcp = this.getAverageMetric('largest_contentful_paint')\n    if (lcp > 2500) {\n      recommendations.push('Optimize Largest Contentful Paint (LCP) - consider image optimization and server response time improvements')\n    }\n\n    const fid = this.getAverageMetric('first_input_delay')\n    if (fid > 100) {\n      recommendations.push('Reduce First Input Delay (FID) - minimize main thread blocking and defer non-critical JavaScript')\n    }\n\n    const cls = this.getAverageMetric('cumulative_layout_shift')\n    if (cls > 0.1) {\n      recommendations.push('Improve Cumulative Layout Shift (CLS) - specify image dimensions and avoid dynamic content insertion')\n    }\n\n    const loadTime = this.getAverageMetric('total_load_time')\n    if (loadTime > 3000) {\n      recommendations.push('Optimize page load time - consider code splitting, lazy loading, and CDN usage')\n    }\n\n    if ('memory' in performance) {\n      const memory = (performance as any).memory\n      const memoryUsagePercent = (memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100\n      if (memoryUsagePercent > 80) {\n        recommendations.push('High memory usage detected - review for memory leaks and optimize data structures')\n      }\n    }\n\n    return recommendations\n  }\n\n  /**\n   * Clear all metrics\n   */\n  clearMetrics(): void {\n    this.metrics = []\n  }\n\n  /**\n   * Export metrics for analysis\n   */\n  exportMetrics(): string {\n    return JSON.stringify({\n      metrics: this.metrics,\n      report: this.generateReport(),\n      exportedAt: new Date().toISOString()\n    }, null, 2)\n  }\n}\n\nexport default PerformanceMonitor"],"names":["_PerformanceMonitor","__publicField","observer","navigation","lcpObserver","list","entries","lastEntry","fidObserver","entry","clsObserver","clsValue","componentName","renderTime","endpoint","duration","success","memory","resourceObserver","userTimingObserver","navigationObserver","metric","category","metricName","relevantMetrics","m","acc","averageLoadTime","averageRenderTime","memoryUsage","recommendations","PerformanceMonitor"],"mappings":"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"}